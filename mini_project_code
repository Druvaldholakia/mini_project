import os

os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'
import sys
import numpy as np

import tensorflow as tf
import numpy as np
import keras 
# from keras.datasets import mnist 
import matplotlib.pyplot as plt



mnist = tf.keras.datasets.mnist
(x_train,y_train) , (x_test , y_test) = mnist.load_data()
x_train , x_test = x_train/255 , x_test/255
# here i have divided by 255 because we have to show the data in the range of 0 to 1
# and 255 meaning the pixel is fully black now you should get the idea
y_train = tf.keras.utils.to_categorical(y_train) 
y_test = tf.keras.utils.to_categorical(y_test) 
# print(x_train.shape)
# plt.imshow(x_train[6],cmap='gray')
# plt.show()

sample,rows,cols = x_train.shape
x_train = x_train.reshape(sample,rows,cols)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(
        32,(3,3), activation = "relu" , input_shape = (28,28,1)
    ),
    tf.keras.layers.MaxPooling2D(pool_size=(2,2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128,activation = "relu"),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(10,activation = "softmax"),

])

model.compile(
     optimizer = "adam",
     loss = "categorical_crossentropy",
     metrics=["accuracy"]
)
model.fit(x_train,y_train,epochs=10)


model.evaluate(x_test,y_test,verbose=2)



if len(sys.argv) == 2:
    filename = sys.argv[1]
    model.save(filename)
    print(f"Model saved to {filename}.")
